datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

//Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//User
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isAdmin       Boolean   @default(false)
  isStaff       Boolean   @default(false)
  password      Password?

  reviews         Review[]
  orders          Order[]
  shippingAddress ShippingAddress[]

  userGroup   userGroup? @relation(fields: [userGroupId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userGroupId String?

  sessions Session[]
  accounts Account[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model userGroup {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

// model Note {
//   id    String @id @default(cuid())
//   title String
//   body  String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId String
// }

//products
model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Product {
  id           String      @id @default(cuid())
  name         String
  image        String?     @default("/images/catalogue/guitar/r/1/512.webp")
  images       Json?
  brand        String?
  vendorCode   String?     @unique
  currencyId   String      @default("USD")
  weight       Decimal?    @default(0.1)
  width        Decimal?    @default(0.1)
  height       Decimal?    @default(0.1)
  length       Decimal?    @default(0.1)
  parameters   Json?
  categories   Category[]
  description  String?
  rating       Decimal?    @default(0.0)
  color        String?     @default("white")
  countInStock Int?        @default(0)
  price        Decimal?
  prices       Json?
  discount     Decimal?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  reviews      Review[]
  orderItems   OrderItem[]
  // cartItems    CartItem[]

  @@unique([id, name])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  content   String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                String          @id @default(cuid())
  paymentMethod     String
  taxPrice          Decimal?
  shippingPrice     Decimal?
  totalPrice        Decimal
  isPaid            Boolean         @default(false)
  paidAt            DateTime?
  isDelivered       Boolean         @default(false)
  deliveredAt       DateTime?
  user              User?           @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userId            String?
  email             String?
  customerName      String?
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  shippingAddressId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  orderItems        OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  productId String
  qty       Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id            String   @id @default(cuid())
  address       String
  city          String
  postalCode    String?
  country       String
  shippingPrice Decimal
  users         User[]
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// model Cart {
//   id         String     @id @default(cuid())
//   totalPrice Decimal?
//   user       User       @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
//   userId     String     @unique
//   createdAt  DateTime   @default(now())
//   updatedAt  DateTime   @updatedAt
//   cartItems  CartItem[]
// }

// model CartItem {
//   id          String   @id @default(cuid())
//   cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   cartId      String
//   product     Product  @relation(fields: [productId, productName], references: [id, name], onDelete: Restrict, onUpdate: Cascade)
//   productId   String
//   productName String
//   qty         Int      @default(1)
//   price       Decimal
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }
